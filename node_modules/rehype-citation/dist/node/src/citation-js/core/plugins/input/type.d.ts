/**
 * @access public
 * @method type
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core~InputData} input
 *
 * @return {module:@citation-js/core.plugins.input~format} type
 */
export function type(input: any): any;
/**
 * @access public
 * @method addTypeParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} format
 * @param {module:@citation-js/core.plugins.input.util.TypeParser} typeParser
 */
export function addTypeParser(format: any, { dataType, predicate, extends: extend }: any): void;
/**
 * @access public
 * @method hasTypeParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} type
 *
 * @return {Boolean} type parser is registered
 */
export function hasTypeParser(type: any): boolean;
/**
 * @access public
 * @method removeTypeParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} type
 */
export function removeTypeParser(type: any): void;
/**
 * @access public
 * @method listTypeParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @return {Array<module:@citation-js/core.plugins.input~format>} list of registered type parsers
 */
export function listTypeParser(): Array<NodeModule>;
/**
 * @access public
 * @method treeTypeParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @return {Object} tree structure
 */
export function treeTypeParser(): any;
/**
 * Validate and parse the format name
 *
 * @access public
 * @method typeMatcher
 * @memberof module:@citation-js/core.plugins.input
 * @type {RegExp}
 */
export const typeMatcher: RegExp;
