/**
 * @access public
 * @method data
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core~InputData} input - input data
 * @param {module:@citation-js/core.plugins.input~format} type - input type
 *
 * @return {*} parsed data
 * @return {Null} if no parser available
 */
export function data(input: any, type: any): any;
/**
 * @access public
 * @method dataAsync
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core~InputData} input - input data
 * @param {module:@citation-js/core.plugins.input~format} type - input type
 *
 * @return {Promise} parsed data
 * @return {Promise<Null>} if no parser available
 */
export function dataAsync(input: any, type: any): Promise<any>;
/**
 * @access protected
 * @method addDataParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} format
 * @param {module:@citation-js/core.plugins.input~parse|module:@citation-js/core.plugins.input~parseAsync} parser
 * @param {Object} [options={}]
 * @param {Boolean} [options.async=false]
 */
export function addDataParser(format: any, { parser, async }: any): void;
/**
 * @access public
 * @method hasDataParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} type
 * @param {Boolean} [async=false] - check only for async, or only sync
 *
 * @return {Boolean} parser exists
 */
export function hasDataParser(type: any, async?: boolean): boolean;
/**
 * @access public
 * @method removeDataParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {module:@citation-js/core.plugins.input~format} type
 * @param {Boolean} [async=false]
 */
export function removeDataParser(type: any, async?: boolean): void;
/**
 * @access public
 * @method listDataParser
 * @memberof module:@citation-js/core.plugins.input
 *
 * @param {Boolean} [async=false]
 */
export function listDataParser(async?: boolean): string[];
